import { config } from 'dotenv';
import { readFileSync, readdirSync } from 'node:fs';
import { dirname, join } from 'node:path';
import { fileURLToPath } from 'node:url';
import { users } from '../prisma/seed_data/original/users';
import { prisma } from '../src/database/prismaClient.js';

config(); // Load .env

const __dirname = dirname(fileURLToPath(import.meta.url));
const SEED_DIR = join(__dirname, '../prisma/seed_data');

function pickLatestJson(prefix: 'games' | 'playeds' | 'users'): any[] {
  const regex = new RegExp(`^${prefix}_(\\d{4}-\\d{2}-\\d{2})\\.json$`);
  const latest = readdirSync(SEED_DIR)
    .filter(f => regex.test(f))
    .sort((a, b) => {
      // Comparar la parte de fecha YYYY-MM-DD
      const dA = regex.exec(a)![1];
      const dB = regex.exec(b)![1];
      return dA.localeCompare(dB);
    })
    .pop(); // el último tras ordenar asc => más reciente

  if (!latest)
    throw new Error(`❌  No se encontró ningún ${prefix}_YYYY-MM-DD.json en ${SEED_DIR}`);

  return JSON.parse(readFileSync(join(SEED_DIR, latest), 'utf8')) as any[];
}

// ────────────────────────────────────────────────────────────
// Cargar los datos más actuales
// ────────────────────────────────────────────────────────────
const games = pickLatestJson('games'); // games_YYYY-MM-DD.json
const playeds = pickLatestJson('playeds'); // playeds_YYYY-MM-DD.json

// ────────────────────────────────────────────────────────────
// Seed routine (igual que antes)
// ────────────────────────────────────────────────────────────
export async function run() {
  try {
    await prisma.$transaction(
      async () => {
        await prisma.users.createMany({
          data: users,
        });
        console.log('Added seed users');
        await prisma.games.createMany({
          data: games,
        });
        console.log('Added seed games');
        await prisma.playeds.createMany({
          data: playeds,
        });
        console.log('Added seed playeds');

        // Next lines set the proper ID count for the autogenerated IDs after the seeding
        await prisma.$queryRaw`SELECT setval(pg_get_serial_sequence('games', 'id'), coalesce(max(id)+1, 1), false) FROM games;`;
        await prisma.$queryRaw`SELECT setval(pg_get_serial_sequence('playeds', 'id'), coalesce(max(id)+1, 1), false) FROM playeds;`;
        await prisma.$queryRaw`SELECT setval(pg_get_serial_sequence('users', 'id'), coalesce(max(id)+1, 1), false) FROM users;`;
      },
      {
        maxWait: 3 * 60 * 1000, // 3 minutes
        timeout: 3 * 60 * 1000, // 3 minutes
      }
    );

    console.log('Seeding process finished!');
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
}

run();
